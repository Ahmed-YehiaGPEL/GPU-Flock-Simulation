#pragma kernel CSMain
#include "UnityCG.cginc"
#include "../Libs/SimplexNoise.cginc"
#define GROUP_SIZE_X 256

/*
	 *Boid State Table
	 *  1 Normal
	 *  2 Being Chased by Predator
	 *  3 Chasing
*/
struct Boid
{
	float3 Position;
	float3 Direction;
	int IsPredator;
	int State;
	float Frame;
	float NextFrame;
	float FrameInterpolation;
	float Padding;
};

RWStructuredBuffer<Boid> boidBuffer;

CBUFFER_START(Params)
float DeltaTime;
float RotationSpeed;
float BoidSpeed;
float PredatorSpeedMultiplier;
float3 FlockingTargetPosition;
float NeighbourhoodRadius;
int BoidsCount;
//Just to control values
int AlignScale;
int CohesionScale;
int SeparationScale;
//Better Control for Boids flow, let's specify different radius values for each rule
float FleeRadius;
float AlignmentRadius;
float CohesionRadius;
float SeparationRadius;
float PredatorHuntRadius;
//Skinning
float AnimationFrameSpeed;
int FramesCount;
CBUFFER_END

float rand(float3 myVector) {
	return frac(sin(dot(myVector, float3(12.9898, 78.233, 45.5432))) * 43758.5453);
}

[numthreads(GROUP_SIZE_X, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	int instanceId = (int)id.x;

	Boid boid = boidBuffer[id.x];
	float noise = simplex_noise(_Time / 100);
	float speed = BoidSpeed * (1.0 + noise);
	float3 separation = float3(0, 0, 0);
	float3 alignment = float3(0, 0, 0);
	float3 cohesion = FlockingTargetPosition; // Always go to the glowing light!

	uint nearbyCount = 1;
	uint cohesionCount = 1;
	uint alignmentCount = 1;
	uint separationCount = 1;

	if (boid.IsPredator == 1)
	{
		speed *= PredatorSpeedMultiplier;
	}
	boid.State = 0;

	for (int i = 0; i < BoidsCount; i++)
	{
		if (i == instanceId)
			continue;

		Boid otherBoid = boidBuffer[i];
		float dist = distance(boid.Position, otherBoid.Position);
		if (boid.IsPredator == 1)
		{
			if (otherBoid.IsPredator == 0)
			{
				//Chase Someone
				if (dist <= PredatorHuntRadius)
				{
					cohesion += otherBoid.Position;
					alignment += otherBoid.Direction;
					cohesionCount += 1;
					alignmentCount += 1;
					boid.State = 3;
				}
			}
		}
		else
		{

			if (dist <= SeparationRadius)
			{
				float3 diff = boid.Position - otherBoid.Position;
				float diffLength = length(diff);
				float scaler = clamp(1.0 - diffLength / SeparationRadius, 0.0, 1.0);
				separation += diff * (scaler / diffLength);
				separationCount += 1;
			}
			if (dist <= CohesionRadius)
			{
				cohesion += otherBoid.Position;
				cohesionCount += 1;
			}
			if (dist <= AlignmentRadius)
			{
				alignment += otherBoid.Direction;
				alignmentCount += 1;
			}
			if (otherBoid.IsPredator == 1)
			{
				if (dist <= FleeRadius)
				{
					boid.State = 2;
					float3 revDirection = boid.Position - otherBoid.Position;
					alignment = otherBoid.Direction + float3(10, 10, 10);
					cohesion = revDirection;
					separation += revDirection * length(revDirection);
					alignmentCount = cohesionCount = separationCount = 2;

					speed *= 3;
					break;
				}
			}
		}
	}

	//Averaging ( Mul is faster than Div on GPU)!
	//float averageFactor = 1.0 / nearbyCount;
	alignment /= alignmentCount;
	cohesion /= cohesionCount;

	// Apply Scaling
	alignment *= AlignScale;
	cohesion *= CohesionScale;
	separation *= SeparationScale;

	cohesion = normalize(cohesion - boid.Position); // Get Normalized Direction of Cohesion Vector from self boid! 

	float3 finalDirection = alignment + separation + cohesion;
	float rotSpeed = RotationSpeed;
	if (boid.State == 3)
	{
		rotSpeed *= 1.5;
	}
	float lerpFactor = exp(-1 * rotSpeed * DeltaTime); //<< Yields Better result than directly interpolating by Rot*DTime!
	boid.Direction = lerp(finalDirection, normalize(boid.Direction), lerpFactor);
	//(Vec) * (float * float) is faster than (Vec * float * float)
	boid.Position += (boid.Direction) * (speed * DeltaTime);
	
	//Animation
	float current_frame = (boid.Frame + speed * (DeltaTime * AnimationFrameSpeed));
	int current_frame_floor = trunc(current_frame);
	boid.Frame = current_frame;
	boid.NextFrame = current_frame_floor + 1;
	boid.FrameInterpolation = current_frame - current_frame_floor;

	if (current_frame_floor >= FramesCount) {
		boid.Frame = 0;
		boid.NextFrame = 1;
	}
	else if (current_frame_floor >= FramesCount - 1) {
		boid.NextFrame = 0;
	}

	boidBuffer[id.x] = boid;
}